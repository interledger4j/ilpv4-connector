package org.interledger.connector;

import org.interledger.connector.packetswitch.PacketRejector;
import org.interledger.connector.settings.ConnectorSettings;
import org.interledger.connector.accounts.AccountId;
import org.interledger.core.InterledgerAddress;
import org.interledger.core.InterledgerErrorCode;
import org.interledger.core.InterledgerPreparePacket;
import org.interledger.core.InterledgerProtocolException;
import org.interledger.core.InterledgerRejectPacket;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Objects;
import java.util.function.Supplier;

/**
 * A centralized place to handle all exceptions generated by this Connector.
 */
public class ConnectorExceptionHandler {

  private final Logger logger = LoggerFactory.getLogger(this.getClass());

  private final Supplier<ConnectorSettings> connectorSettingsSupplier;
  private final PacketRejector packetRejector;

  public ConnectorExceptionHandler(
    final Supplier<ConnectorSettings> connectorSettingsSupplier, final PacketRejector packetRejector
  ) {
    this.connectorSettingsSupplier = connectorSettingsSupplier;
    this.packetRejector = packetRejector;
  }

  public InterledgerRejectPacket handleException(
    final AccountId sourceAccountId, final InterledgerPreparePacket preparePacket, final Exception e
  ) {
    Objects.requireNonNull(sourceAccountId);
    Objects.requireNonNull(preparePacket);
    Objects.requireNonNull(e);

    if (InterledgerProtocolException.class.isAssignableFrom(e.getClass())) {
      final InterledgerRejectPacket rejectPacket = ((InterledgerProtocolException) e).getInterledgerRejectPacket();
      logger.warn(
        "[OPERATOR: `{}`]: Rejecting PREPARE Packet from `{}`: PREPARE_PACKET: {} REJECT_PACKET: {} ERROR: {}",
        connectorSettingsSupplier.get().getOperatorAddress().map(InterledgerAddress::getValue).orElse("unknown"),
        sourceAccountId,
        preparePacket,
        rejectPacket,
        e.getMessage()
      );
      return rejectPacket;
    } else if (ArithmeticException.class.isAssignableFrom(e.getClass())) {
      return this.packetRejector.reject(
        sourceAccountId, preparePacket, InterledgerErrorCode.F03_INVALID_AMOUNT, e.getMessage()
      );
    } else {
      logger.error(e.getMessage(), e);
      return this.packetRejector.reject(
        sourceAccountId, preparePacket, InterledgerErrorCode.T00_INTERNAL_ERROR, "Internal Error"
      );
    }
  }


}
